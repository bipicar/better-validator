/// <reference path="../typings/underscore/underscore.d.ts" />
"use strict";
const _ = require('underscore');
const base_1 = require('./base');
const isNumber_1 = require('./isNumber');
const isString_1 = require('./isString');
const isObject_1 = require('./isObject');
const isArrayOf_1 = require('./isArrayOf');
class IsAnything extends base_1.Base {
    constructor(path) {
        super(path);
    }
    isNumber() {
        const child = new isNumber_1.IsNumber(this.path);
        this.satisfies('isNumber', (value) => (!base_1.Base.hasValue(value) || _.isNumber(value)) && (!isNaN(value) || value === undefined) && child.test(value));
        return child;
    }
    isString() {
        const child = new isString_1.IsString(this.path);
        this.satisfies('isString', (value) => (!base_1.Base.hasValue(value) || _.isString(value)) && child.test(value));
        return child;
    }
    isObject(objectValidator) {
        const child = new isObject_1.IsObject(this.path, objectValidator, IsAnything, 'isAnything');
        this.satisfies('isObject', (value) => (!base_1.Base.hasValue(value) || _.isObject(value)) && child.test(value));
        return child;
    }
    isArrayOf(childValidator) {
        const factory = (path) => {
            return new isObject_1.IsObject(path, childValidator, IsAnything, 'isAnything');
        };
        const child = new isArrayOf_1.IsArrayOf(this.path, factory, 'isObject');
        this.satisfies('isArrayOf', (value) => (!base_1.Base.hasValue(value) || _.isArray(value)) && child.test(value));
        return child;
    }
}
exports.IsAnything = IsAnything;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Y2UgcGF0aD1cIi4uL3R5cGluZ3MvdW5kZXJzY29yZS91bmRlcnNjb3JlLmQudHNcIiAvPlxuXG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHtCYXNlfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHtJc051bWJlcn0gZnJvbSAnLi9pc051bWJlcic7XG5pbXBvcnQge0lzU3RyaW5nfSBmcm9tICcuL2lzU3RyaW5nJztcbmltcG9ydCB7SXNPYmplY3R9IGZyb20gJy4vaXNPYmplY3QnO1xuaW1wb3J0IHtJc0FycmF5T2Z9IGZyb20gJy4vaXNBcnJheU9mJztcblxuZXhwb3J0IGNsYXNzIElzQW55dGhpbmcgZXh0ZW5kcyBCYXNlIHtcbiAgY29uc3RydWN0b3IocGF0aDooc3RyaW5nfG51bWJlcilbXSkge1xuICAgIHN1cGVyKHBhdGgpO1xuICB9XG5cbiAgaXNOdW1iZXIoKSB7XG4gICAgY29uc3QgY2hpbGQgPSBuZXcgSXNOdW1iZXIodGhpcy5wYXRoKTtcbiAgICB0aGlzLnNhdGlzZmllcygnaXNOdW1iZXInLCAodmFsdWUpID0+ICghQmFzZS5oYXNWYWx1ZSh2YWx1ZSkgfHwgXy5pc051bWJlcih2YWx1ZSkpICYmICghaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSB1bmRlZmluZWQpICYmIGNoaWxkLnRlc3QodmFsdWUpKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICBpc1N0cmluZygpIHtcbiAgICBjb25zdCBjaGlsZCA9IG5ldyBJc1N0cmluZyh0aGlzLnBhdGgpO1xuICAgIHRoaXMuc2F0aXNmaWVzKCdpc1N0cmluZycsICh2YWx1ZSkgPT4gKCFCYXNlLmhhc1ZhbHVlKHZhbHVlKSB8fCBfLmlzU3RyaW5nKHZhbHVlKSkgJiYgY2hpbGQudGVzdCh2YWx1ZSkpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIGlzT2JqZWN0KG9iamVjdFZhbGlkYXRvcikge1xuICAgIGNvbnN0IGNoaWxkID0gbmV3IElzT2JqZWN0KHRoaXMucGF0aCwgb2JqZWN0VmFsaWRhdG9yLCBJc0FueXRoaW5nLCAnaXNBbnl0aGluZycpO1xuICAgIHRoaXMuc2F0aXNmaWVzKCdpc09iamVjdCcsICh2YWx1ZSkgPT4gKCFCYXNlLmhhc1ZhbHVlKHZhbHVlKSB8fCBfLmlzT2JqZWN0KHZhbHVlKSkgJiYgY2hpbGQudGVzdCh2YWx1ZSkpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIGlzQXJyYXlPZihjaGlsZFZhbGlkYXRvcikge1xuICAgIGNvbnN0IGZhY3RvcnkgPSAocGF0aCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBJc09iamVjdChwYXRoLCBjaGlsZFZhbGlkYXRvciwgSXNBbnl0aGluZywgJ2lzQW55dGhpbmcnKTtcbiAgICB9O1xuICAgIGNvbnN0IGNoaWxkID0gbmV3IElzQXJyYXlPZih0aGlzLnBhdGgsIGZhY3RvcnksICdpc09iamVjdCcpO1xuICAgIHRoaXMuc2F0aXNmaWVzKCdpc0FycmF5T2YnLCAodmFsdWUpID0+ICghQmFzZS5oYXNWYWx1ZSh2YWx1ZSkgfHwgXy5pc0FycmF5KHZhbHVlKSkgJiYgY2hpbGQudGVzdCh2YWx1ZSkpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufVxuIl19

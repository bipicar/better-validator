/// <reference path="../typings/validator/validator.d.ts" />
"use strict";
const validator = require("validator");
const base_1 = require("./base");
class IsString extends base_1.Base {
    constructor(path) {
        super(path);
        for (const key of Object.keys(validator)) {
            if (!/^is/.test(key))
                continue;
            const fn = validator[key];
            if (typeof fn !== 'function')
                continue;
            this[key] = (...args) => {
                this.satisfies(key, (value) => !base_1.Base.hasValue(value) || fn.call(validator, value, ...args));
                return this;
            };
            const notKey = `not${key.slice(2)}`;
            this[notKey] = (...args) => {
                this.satisfies(notKey, (value) => !base_1.Base.hasValue(value) || !fn.call(validator, value, ...args));
                return this;
            };
        }
    }
    isMatch(regex) {
        this.satisfies('isMatch', (value) => !base_1.Base.hasValue(value) || regex.test(value));
        return this;
    }
    notMatch(regex) {
        this.satisfies('notMatch', (value) => !base_1.Base.hasValue(value) || !regex.test(value));
        return this;
    }
}
exports.IsString = IsString;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzU3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDREQUE0RDs7QUFFNUQsTUFBWSxTQUFTLFdBQU0sV0FBVyxDQUFDLENBQUE7QUFDdkMsdUJBQW1CLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLHVCQUE4QixXQUFJO0lBQ2hDLFlBQVksSUFBc0I7UUFDaEMsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUVaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLFVBQVUsQ0FBQztnQkFBQyxRQUFRLENBQUM7WUFFdkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJO2dCQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssS0FBSyxDQUFDLFdBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDNUYsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSTtnQkFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxXQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDaEcsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQVk7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxXQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqRixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZO1FBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUEvQlksZ0JBQVEsV0ErQnBCLENBQUEiLCJmaWxlIjoiaXNTdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy92YWxpZGF0b3IvdmFsaWRhdG9yLmQudHNcIiAvPlxuXG5pbXBvcnQgKiBhcyB2YWxpZGF0b3IgZnJvbSBcInZhbGlkYXRvclwiO1xuaW1wb3J0IHtCYXNlfSBmcm9tIFwiLi9iYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBJc1N0cmluZyBleHRlbmRzIEJhc2Uge1xuICBjb25zdHJ1Y3RvcihwYXRoOihzdHJpbmd8bnVtYmVyKVtdKSB7XG4gICAgc3VwZXIocGF0aCk7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh2YWxpZGF0b3IpKSB7XG4gICAgICBpZiAoIS9eaXMvLnRlc3Qoa2V5KSkgY29udGludWU7XG4gICAgICBjb25zdCBmbiA9IHZhbGlkYXRvcltrZXldO1xuICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG5cbiAgICAgIHRoaXNba2V5XSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIHRoaXMuc2F0aXNmaWVzKGtleSwgKHZhbHVlKSA9PiAhQmFzZS5oYXNWYWx1ZSh2YWx1ZSkgfHwgZm4uY2FsbCh2YWxpZGF0b3IsIHZhbHVlLCAuLi5hcmdzKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgbm90S2V5ID0gYG5vdCR7a2V5LnNsaWNlKDIpfWA7XG4gICAgICB0aGlzW25vdEtleV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICB0aGlzLnNhdGlzZmllcyhub3RLZXksICh2YWx1ZSkgPT4gIUJhc2UuaGFzVmFsdWUodmFsdWUpIHx8ICFmbi5jYWxsKHZhbGlkYXRvciwgdmFsdWUsIC4uLmFyZ3MpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGlzTWF0Y2gocmVnZXg6UmVnRXhwKTp0aGlzIHtcbiAgICB0aGlzLnNhdGlzZmllcygnaXNNYXRjaCcsICh2YWx1ZSkgPT4gIUJhc2UuaGFzVmFsdWUodmFsdWUpIHx8IHJlZ2V4LnRlc3QodmFsdWUpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG5vdE1hdGNoKHJlZ2V4OlJlZ0V4cCk6dGhpcyB7XG4gICAgdGhpcy5zYXRpc2ZpZXMoJ25vdE1hdGNoJywgKHZhbHVlKSA9PiAhQmFzZS5oYXNWYWx1ZSh2YWx1ZSkgfHwgIXJlZ2V4LnRlc3QodmFsdWUpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19

/// <reference path="../typings/underscore/underscore.d.ts" />
"use strict";
const _ = require("underscore");
const base_1 = require("./base");
class IsArrayOf extends base_1.Base {
    constructor(path, itemValidatorFactory, itemValidatorName) {
        super(path);
        this.itemValidatorFactory = itemValidatorFactory;
        this.itemValidatorName = itemValidatorName;
        this.validateArray();
    }
    validateArray() {
        this.satisfies('isArray', (value) => {
            if (!_.isArray(value))
                return false;
            let passed = true;
            for (let i = 0; i < value.length; i++) {
                const item = value[i];
                const path = this.path.slice();
                path.push(i);
                const child = this.itemValidatorFactory(path);
                passed = passed && (!base_1.Base.hasValue(item) || child.test(item));
            }
            return passed;
        });
    }
    length(expected) {
        this.satisfies('length', (value) => !base_1.Base.hasValue(value) || value.length === expected);
        return this;
    }
    lengthInRange(lower, upper) {
        this.satisfies('lengthInRange', (value) => !base_1.Base.hasValue(value) || (lower === undefined || value.length >= lower) && (upper === undefined || value.length <= upper));
        return this;
    }
}
exports.IsArrayOf = IsArrayOf;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQXJyYXlPZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4REFBOEQ7O0FBRTlELE1BQVksQ0FBQyxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBQ2hDLHVCQUFtQixRQUFRLENBQUMsQ0FBQTtBQUs1Qix3QkFBK0IsV0FBSTtJQUlqQyxZQUFZLElBQXNCLEVBQUUsb0JBQXlDLEVBQUUsaUJBQXdCO1FBQ3JHLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBRTNDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSztZQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUVwQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLFdBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLENBQUM7WUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFlO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQVksRUFBRSxLQUFZO1FBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3RLLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQXJDWSxpQkFBUyxZQXFDckIsQ0FBQTtBQUNELENBQUMiLCJmaWxlIjoiaXNBcnJheU9mLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdW5kZXJzY29yZS91bmRlcnNjb3JlLmQudHNcIiAvPlxuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJ1bmRlcnNjb3JlXCI7XG5pbXBvcnQge0Jhc2V9IGZyb20gXCIuL2Jhc2VcIjtcblxuZXhwb3J0IGRlY2xhcmUgdHlwZSBvYmplY3RWYWxpZGF0b3IgPSAoY2hpbGRWYWxpZGF0b3IpID0+IHZvaWQ7XG5leHBvcnQgZGVjbGFyZSB0eXBlIGl0ZW1WYWxpZGF0b3JGYWN0b3J5ID0gKHBhdGg6KHN0cmluZ3xudW1iZXIpW10pID0+IEJhc2U7XG5cbmV4cG9ydCBjbGFzcyBJc0FycmF5T2YgZXh0ZW5kcyBCYXNlIHtcbiAgaXRlbVZhbGlkYXRvckZhY3Rvcnk6aXRlbVZhbGlkYXRvckZhY3Rvcnk7XG4gIGl0ZW1WYWxpZGF0b3JOYW1lOnN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwYXRoOihzdHJpbmd8bnVtYmVyKVtdLCBpdGVtVmFsaWRhdG9yRmFjdG9yeTppdGVtVmFsaWRhdG9yRmFjdG9yeSwgaXRlbVZhbGlkYXRvck5hbWU6c3RyaW5nKSB7XG4gICAgc3VwZXIocGF0aCk7XG4gICAgdGhpcy5pdGVtVmFsaWRhdG9yRmFjdG9yeSA9IGl0ZW1WYWxpZGF0b3JGYWN0b3J5O1xuICAgIHRoaXMuaXRlbVZhbGlkYXRvck5hbWUgPSBpdGVtVmFsaWRhdG9yTmFtZTtcblxuICAgIHRoaXMudmFsaWRhdGVBcnJheSgpO1xuICB9XG5cbiAgdmFsaWRhdGVBcnJheSgpIHtcbiAgICB0aGlzLnNhdGlzZmllcygnaXNBcnJheScsICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKCFfLmlzQXJyYXkodmFsdWUpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGxldCBwYXNzZWQgPSB0cnVlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhdGguc2xpY2UoKTtcbiAgICAgICAgcGF0aC5wdXNoKGkpO1xuICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuaXRlbVZhbGlkYXRvckZhY3RvcnkocGF0aCk7XG4gICAgICAgIHBhc3NlZCA9IHBhc3NlZCAmJiAoIUJhc2UuaGFzVmFsdWUoaXRlbSkgfHwgY2hpbGQudGVzdChpdGVtKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFzc2VkO1xuICAgIH0pO1xuICB9XG5cbiAgbGVuZ3RoKGV4cGVjdGVkOm51bWJlcik6dGhpcyB7XG4gICAgdGhpcy5zYXRpc2ZpZXMoJ2xlbmd0aCcsICh2YWx1ZSkgPT4gIUJhc2UuaGFzVmFsdWUodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA9PT0gZXhwZWN0ZWQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGVuZ3RoSW5SYW5nZShsb3dlcjpudW1iZXIsIHVwcGVyOm51bWJlcik6dGhpcyB7XG4gICAgdGhpcy5zYXRpc2ZpZXMoJ2xlbmd0aEluUmFuZ2UnLCAodmFsdWUpID0+ICFCYXNlLmhhc1ZhbHVlKHZhbHVlKSB8fCAobG93ZXIgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5sZW5ndGggPj0gbG93ZXIpICYmICh1cHBlciA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlLmxlbmd0aCA8PSB1cHBlcikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG47XG4iXX0=
